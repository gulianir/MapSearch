CSE 331 Homework 4.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Rohan Guliani

Problem 0.

(a)

r = pq: 
	set r = 0
	foreach term tp in p:
		foreach term in tq in q:
			replace r with the sum of r and the product of tp and tq (calculated by multiplying the coeefficients and adding the exponents)
			
	return r

(b)

r = p/q: 
	set quo = 0 and rem = copy of p
	while (rem != 0 and degree of rem >= degree of q):
		t = leading term of rem / leading term of q (divide terms by dividing coeefficients and subtracting exponents)
		quo = quo + t
		rem = rem - (t*q)
		
	return quo	


(c)

p = x^3 + x -1
q = x + 1

quo = 0
rem = x^3 + x - 1 = copy of p

while (rem != 0 and degree of rem >= degree of q)
	Iteration 1: 
		t = (x^3 / x) = x^2
		quo = x^2
		rem = x^3 + x - 1 - [ (x^2) * (x + 1) ] = -(x^2) + x - 1
		{ rem not zero and degree of rem still >= than degree of q so we move on }
		
	Iteration 2: 
		t = [-(x^2) / x] = -x
		quo = x^2 + (-x) = x^2 - x
		rem = -(x^2) + x - 1 -[ (-x) * (x+1) ] = 2x -1
		{ rem not zero and degree of rem still >= than degree of q so we move on }
		
	Iteration 3:
		t = 2x/x = 2
		quo = x^2 - x + 2
		rem = (2x-1) -[2*(x+1)] = -3
		{ degree of rem is now smaller than the degree of q so we stop. We're done. }
		
	return quo = x^2 - x + 2.


Problem 1.

(a)
The places that most clearly will have to change are the methods near the end: equals, toString, and hashCode. 
In equals, we would have to simplify the fraction before comparing the num. and den. directly to ensure 
equality is preserved. In toString, we would have to simplify before returning the string representation generated
by the current toString method. In hashCode, we would have to simplify before generating the int value. 
Although this may improve efficiency to a small extent in construction since simplification doesn't have to take place 
and the checkRep doesn't have to be called on every instantiation, this improvement will be cancelled out by objects that 
call equals and toString (potentially more than once). It also complicates the code since there's no guarantee that the 
RatNum data internally is simplified, and this in-turn can affect future implementations.  

(b)
A clear violation is in the @return clauses of the add, sub, etc. methods themselves: these clauses state that the returned
RatNum is equivalent to, for example in add, (this + arg), but this is not true in the new definition because the data in 'this'
itself has been incremented by arg, and hence the return value is not equivalent to (this+arg). To be more clear the @return could
mention that the return value is (this_pre + arg) instead. Additionally, the lack of the @modifies clause fails to inform the user that 
internal values of the original object itself has changed--without the @modifies, the user should be able to assume that the returned 
object is not the same (doesn't refer to the same object) as the original object, but in this case it does. Finally, the object cannot be 
immutable if the fields are being changed, and hence without the simplification and call to checkRep that was taking place when new objects
were being constructed, the rep invariant is no longer preserved without more simplification and insurance (call to checkRep) inside these 
methods (add, sub, etc.) themselves. 



(c)
Immutability of the RatNum objects prevents changes to RatNum instances. Hence, given that the RatNum class is immutable, by definition
none of its methods can change its instance variables. Since the rep invariant deals with instance variables, it can never be broken 
once a valid object has been constructed. Hence, if the rep invariant holds at the end of the constructors, it will always hold 
for that object, and hence is the only place we need to call that method. 


Problem 2.

(a)
For the same reason RatNum didn't need checkRep anywhere besides the end of the constructors, RatTerm doesn't either. RatTerm is 
immutable, and hence none of its methods can change its fields, and the rep invariant will be true given checkRep passed just 
before the constructor ended. 


(b)
The toString method having to add an extra branch for when coeff is equal to zero and outputting correctly is the only place where
implementation will have to be changed--everywhere else, the presence of a non-zero exponent doesn't actually affect final values. 
As an example, in mul, if the coefficient is zero then it will still return zero since 0 times anything is zero. As another example, 
isZero simply checks if the coefficient is zero and doesn't consider the exponent at all. Hence weakening the rep invariant actually 
improves efficiency since the constructor no longer has to manually make the exponent zero in the case the coefficient is zero and 
insure that with the checkRep, and the only place we have to do that is in the toString method. 


(c)
The one place that will definitely have to change is the constructor where the NaN case is just included with everything else besides
the zero case--instead, the NaN case will have to be taken with the zero case and the exponent set to zero to preserve the new invariant. 
Once every new object is enforced to this new invariant it will be maintained since the class is immutable. Also, since the class
constants that are frequently used to return NaN and ZERO cases satisfy the invariants, returning these still work as well. 


Problem 5.

1/2*x^2+10*x
55/2*x^2
x^3+2*x+10
1/5*x^3+2*x